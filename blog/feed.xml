<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strings over Σ</title>
    <description>A blog about computer science, logic and programming. Occasionally other topics reasonably consistent with the rest.
</description>
    <link>https://bitsrc.org/blog/</link>
    <atom:link href="https://bitsrc.org/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Sep 2020 23:40:13 +0200</pubDate>
    <lastBuildDate>Thu, 03 Sep 2020 23:40:13 +0200</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Linux: The good, the bad and the ugly</title>
        <description>&lt;p&gt;I’ve been working on system-level software for Linux for some time now,
which is a job that makes you much more likely to encounter the odd corner
of an operating system than higher level development. For all practical
purposes, Linux has succeeded as an operating system. Billions of web queries
are being served from Linux servers every day, and it’s running on &lt;a href=&quot;https://twitter.com/Android/status/1125822326183014401&quot;&gt;billions&lt;/a&gt; of
mobile devices.&lt;/p&gt;

&lt;p&gt;But of course an operating system ultimately rooted in the 70s will have
accumulated its fair share of legacy. Of course, not all problems are rooted
in this: we still are perfectly capable of making new and exciting mistakes.&lt;/p&gt;

&lt;h1 id=&quot;everything-ish-is-a-file-ish&quot;&gt;Everything-ish is a file-ish&lt;/h1&gt;
&lt;p&gt;File descriptors are one of the most poorly named concepts, as they don’t
necessarily represent (or describe) a file. Think of them more as pointers to
resources in the kernel (which are conveniently referenced-counted), and things
will start making more sense. You can use file descriptors to refer to many
things, among them&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt;Files and Directories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/socket.2.html&quot;&gt;Sockets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/pipe.2.html&quot;&gt;Pipes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/timerfd_create.2.html&quot;&gt;Timers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/signalfd.2.html&quot;&gt;Incoming signals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/memfd_create.2.html&quot;&gt;Anonymous memory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/eventfd.2.html&quot;&gt;Events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/pidfd_open.2.html&quot;&gt;Processes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/perf_event_open.2.html&quot;&gt;Performance counters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sadly, &lt;a href=&quot;https://lwn.net/Articles/280960/&quot;&gt;not locks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of these things are not files in the either the sense that you can use
them to store data, nor in the sense that they have a path on the file system.
That all of these things are file descriptors is actually kind of cool: you can
wait on many of these things, and asynchronous I/O APIs like &lt;code class=&quot;highlighter-rouge&quot;&gt;epoll&lt;/code&gt; operate on
file descriptors. This means that you can wait for data to become available on
some socket &lt;em&gt;or&lt;/em&gt; for some timer to run out &lt;em&gt;or&lt;/em&gt; for a POSIX signal to arrive.
No threading nonsense involved.&lt;/p&gt;

&lt;p&gt;On the other hand, a file descriptor to an application developer is just an
integer. From an API perspective, now you end up with all of these things just
being integers, and all being called fd, and many functions operating on fds,
all of them working on a different subset of them. For instance, what would it
even mean to write to a timerfd? This gets even worse when talking about errors.
Manpages will have a list of possible errnos, but with file descriptor
functions, usually all bets are off (short of delving into the kernel source)
of trying to understand which ones can happen for your particular case. If
your FD is special enough (say, some &lt;code class=&quot;highlighter-rouge&quot;&gt;/sys&lt;/code&gt; file), you might even get errors
that are &lt;em&gt;not&lt;/em&gt; listed on the manpage.&lt;/p&gt;

&lt;h1 id=&quot;quiz&quot;&gt;“Everything is bytes\n\0”&lt;/h1&gt;
&lt;p&gt;Linux has around 300 system calls that you can use in your programs. This is
sometimes cited as an impressively small API surface for a kernel,
but that’s only telling half of the truth. There are many, many files in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/sys&lt;/code&gt; virtual file-systems that you can read from to get
information or write to to change some behaviour. You can use them to read a
process’ command line, to get its CPU use, its memory use, to get or change the
maximum number of file-descriptors open, set counters on breakpoints, etc.
Long story short, you can do many things. If you are writing systems software,
you will be using those quite a lot.&lt;/p&gt;

&lt;p&gt;Most of those produce (or consume) information in ASCII, so if you want to use
them programatically, you’ll have to parse the output. If you want to do that,
it helps to know the format well.&lt;/p&gt;

&lt;p&gt;Pop quiz! No cheating.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Does &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;pid&amp;gt;/cmdline&lt;/code&gt; have a trailing NUL-byte?&lt;/li&gt;
  &lt;li&gt;Does &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;pid&amp;gt;/status&lt;/code&gt; use tabs or spaces?&lt;/li&gt;
  &lt;li&gt;Does &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;pid&amp;gt;/status&lt;/code&gt; have a trailing newline?&lt;/li&gt;
  &lt;li&gt;NUL-byte?&lt;/li&gt;
  &lt;li&gt;Does &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;pid&amp;gt;/oom_score&lt;/code&gt; (a single value) have a trailing newline?&lt;/li&gt;
  &lt;li&gt;Does &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;pid&amp;gt;/wchan&lt;/code&gt; (a single value) have a trailing newline?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#quiz-results&quot;&gt;Go to results&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So that was fun! If you haven’t looked at the results yet, please do take a
second, even if you haven’t tried to answer yourself. There are multiple problems
highlighted: most of &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt; files are ad-hoc text formats (at least &lt;em&gt;most&lt;/em&gt; of
them do use newlines, it appears). Another one is that they are extremely poorly
documented. A quick look at &lt;a href=&quot;http://man7.org/linux/man-pages/man5/proc.5.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man 5 proc&lt;/code&gt;&lt;/a&gt; would not go far in answering
the questions in this quiz. You have to look at the files and work out the
format from this. Of course, if you read this from a program, the kernel
rendering text only for your program to parse it back again is wasteful in both
computer and human resources. This being ad-hoc formats, one has to write a
parser for each and every one of them.&lt;/p&gt;

&lt;p&gt;For some high-volume formats like ftrace, parsing from the text format is
actually prohibitively expensive. This is why there is also a (undocumented)
de-facto binary interface. With some configuration in, yes, you guessed it,
a custom text format.&lt;/p&gt;

&lt;h1 id=&quot;manything-is-a-race&quot;&gt;Manything is a race&lt;/h1&gt;
&lt;p&gt;How would you implement &lt;code class=&quot;highlighter-rouge&quot;&gt;killall&lt;/code&gt;? Conceptually, it’s fairly simple: you go
through all processes, and kill the ones matching. Having some function
&lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt; to determine whether a PID matches the given specification, you’d
write something along the lines of this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_pids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cool. That seems to work (given some imagination). But if you are a diligent
programmer, maybe having done some multi-threaded programming, something might
look a bit off. All we pass around is an integer &lt;code class=&quot;highlighter-rouge&quot;&gt;pid&lt;/code&gt;, so how do we know it
refers to the same process in &lt;code class=&quot;highlighter-rouge&quot;&gt;match(pid)&lt;/code&gt; and in &lt;code class=&quot;highlighter-rouge&quot;&gt;kill(pid)&lt;/code&gt;? Processes can
go away, and their PIDs will be re-used. In that case, we could potentially
match PID 1234 when it is &lt;code class=&quot;highlighter-rouge&quot;&gt;retriable_nonsense_job&lt;/code&gt;, but kill
&lt;code class=&quot;highlighter-rouge&quot;&gt;super_important_process&lt;/code&gt; later.&lt;/p&gt;

&lt;p&gt;So how do you write a &lt;em&gt;correct&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;killall&lt;/code&gt;? Turns out, on Linux it’s impossible
before 5.1, on other Unices it might still be. All the major operating systems’
implementations are not fundamentally different to the pseudocode above&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.
On Linux 5.1, you can &lt;code class=&quot;highlighter-rouge&quot;&gt;opendir&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/\&amp;lt;pid\&amp;gt;&lt;/code&gt;, then use that as a handle to both
read the command line (and other attributes), and &lt;code class=&quot;highlighter-rouge&quot;&gt;pidfd_send_signal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This might remind you of some code you might have written. Something like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;oh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;YOUR_EINTR_WRAPPER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Could PID-reuse mean you could end up waiting on something else? Something
that might never exit, in the worst case? Thankfully, not.
The child process will actually stick around as a &lt;em&gt;zombie&lt;/em&gt;, even
if it is finished, until you waitpid for it. As you can only wait on your
children, no race can occur like this. Of course, the other thing that can
happen is that the parent dies before it has chance to waitpid. In that case,
the problem is also averted through some gymnastics: the child process gets
&lt;em&gt;orphaned&lt;/em&gt; and reparented to &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, which will wait on it to prevent the
zombie from sticking around. &lt;em&gt;Phew&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;for-forks-sake&quot;&gt;For fork’s sake&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;&lt;/a&gt; is one of the
fundamental building blocks of Unix systems. It goes way back to the old days of
Unix and is used to create a new process. That process is a copy of the
original one. From an API perspective, to the child it will appear that &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;
returned 0, while to the parent the PID of the child. Kind of magical if you
think of it.&lt;sup id=&quot;fnref:exhalation&quot;&gt;&lt;a href=&quot;#fn:exhalation&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Memory does not actually get copied just yet, but only when either the parent
or the child attempt to change it (this is called copy-on-write). File
descriptors will get duplicated (convenient that they are already referenced
counted). Problems already start popping up here: you need to be sure to close
the ones you don’t actually need in the child, or you might hold on to them
forever. This gets even worse if you &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; another program, which (in general)
won’t know or care about your file descriptors. To solve the latter problem,
&lt;code class=&quot;highlighter-rouge&quot;&gt;O_CLOEXEC&lt;/code&gt; (close on exec) was invented. Of course that’s not the default, so
people often manually iterate over all FDs (via &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;), and then close them
all.&lt;/p&gt;

&lt;p&gt;But then came threads, and we went from bad to worse. Because it’s unclear what
to do with all these other threads (it’s not like they have a call to fork where
they could take different branches), they just get terminated in whatever state
they are when fork gets called. Remember we copied the whole memory state? That
might contain a lock (say, in &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;) that was being held by one of those
threads. The next time anything calls &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;, it will be stuck forever,
waiting on the now terminated thread. Your child process is toast. Your program
might even be single threaded, but some library you pulled might have created a
thread, that might have happened to do an allocation when you called fork.&lt;/p&gt;

&lt;p&gt;They came up with &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_atfork&lt;/code&gt; hooks that get called before the fork, and
then afterwards in the parent on the child. That was intended to allow library
developers to make their libraries safe in the presence of forks, but even the
manpage concedes that this “is generally too difficult to be practicable.”&lt;/p&gt;

&lt;p&gt;But there’s more! Even though the memory isn’t actually copied, forking is
still an expensive operation for the kernel. It has to copy all sorts of
structures like page tables and so on. That’s a waste if all we are going
to do is exec a new program, replacing the page tables once again. So
they came up with &lt;code class=&quot;highlighter-rouge&quot;&gt;vfork&lt;/code&gt;, which is like fork except that you pinkie-promise
not to call anything except &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;_exit&lt;/code&gt; afterwards. This raises
questions about the API design: if all you are allowed to call is &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;, why
not create a function that is the combination of vfork an exec? With all the
different exec variations I can see how that would be slightly painful, but at
least not something that makes it super easy to shoot your foot. In fact,
&lt;code class=&quot;highlighter-rouge&quot;&gt;posix_spawn&lt;/code&gt; is exactly that and was standardised in 2001.&lt;/p&gt;

&lt;p&gt;But going further down the route of forking, modern Linux also has something
else up its sleeve: &lt;a href=&quot;http://man7.org/linux/man-pages/man2/clone.2.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt;&lt;/a&gt;. That let’s you mix-and-match what your new
thread/process should share and what it shouldn’t. It let’s you create
something that has its own process id, but is a thread for all other intents
and purposes. Good luck.
glibc does not provide a syscall wrapper for this, so you’ll have to be extra
dedicated to use this.&lt;sup id=&quot;fnref:wrapper&quot;&gt;&lt;a href=&quot;#fn:wrapper&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Ultimately, things do not compose in a way that make it possible to locally
reason about a program. Yes, if you hold fork and threads exactly right (for
instance by managing all the threads, and having a way to signal them to go
to a safe state, and then forking) you &lt;em&gt;can&lt;/em&gt; write a correct program. But that
requires you to reason globally about your program, which only works if you
control every bit of your program, and even then is very hard.&lt;/p&gt;

&lt;h1 id=&quot;enosys&quot;&gt;ENOSYS&lt;/h1&gt;
&lt;p&gt;Writing cross-platform software is hard. Most software is written for Linux,
and if it happens to run on other Unices, that is a happy accident. For systems
software, that is usually a lost cause, as it needs more powerful APIs than
POSIX provides. So we’ll settle for Linux. Most of these APIs were introduced
at some point, so you’d usually target Linux of some version or newer – this
is a generally unavoidable thing to do. But even then Linux has compile-time
configuration flags that will enable or disable some system calls, or some
arguments to system calls. And some depend on the target architecture. It’s a
bit like duck typing: you call it and hope it works.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ENOSYS The membarrier() system call is not implemented by this
      kernel.&lt;/p&gt;

  &lt;p&gt;EINVAL cmd is invalid, or flags is nonzero, or the
       MEMBARRIER_CMD_GLOBAL command is disabled because the
       nohz_full CPU parameter has been set, or the
       MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE and
       MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE commands
       are not implemented by the architecture.&lt;/p&gt;

  &lt;p&gt;– &lt;a href=&quot;http://man7.org/linux/man-pages/man2/membarrier.2.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man 2 membarrier&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any software that uses one of those system calls is inherently unportable even
between machines of the &lt;em&gt;same kernel version&lt;/em&gt;. You will notice this
incompatibility at runtime, whenever you attempt to call that syscall.
Some more sanity could be achieved if there was a way to check for this without
actually calling the syscall. Then some static analysis could figure out which
syscalls you use, and then generate a stanza to check whether they exist that
you can run at first startup. Everything would be like &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;. What’s
not to love?&lt;/p&gt;

&lt;h1 id=&quot;standards&quot;&gt;Standards&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;WE DO NOT BREAK USERSPACE!&lt;/p&gt;

  &lt;p&gt;– Linus (2012)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C++ has &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n3337/&quot;&gt;The Standard&lt;/a&gt;, which, even
being aspirational&lt;sup id=&quot;fnref:aspirational&quot;&gt;&lt;a href=&quot;#fn:aspirational&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; at times, gives people a way to abstractly
reason about their programs. Unix has POSIX, but that is a very low
common denominator. Linux-specific details have no standard whatsoever. In the
end, the kernel behaviour is whatever is in the kernel source, and the
kernel promises to not break userspace&lt;sup id=&quot;fnref:nobreak&quot;&gt;&lt;a href=&quot;#fn:nobreak&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. For libc, it’s the wild west
without any proper specification once you go beyond what’s specified in C and
POSIX.&lt;/p&gt;

&lt;p&gt;With the proliferation on non-Glibc based Linux systems (musl on Alpine Linux,
Bionic on Android) this makes interoperability more painful than it has to be.
But more than that: it makes system programming &lt;em&gt;very hard&lt;/em&gt;. It is often
impossible to work in all situations client code could construct via creative
use of the available syscalls. Ultimately, looking at kernel and userspace in
isolation is not the right approach. In an ideal world, applications should not
need to care about the kernel.&lt;/p&gt;

&lt;h1 id=&quot;errno&quot;&gt;Errno&lt;/h1&gt;

&lt;p&gt;Pop quiz again! How did I get this error?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out 
bash: ./a.out: No such file or directory&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you guessed that &lt;code class=&quot;highlighter-rouge&quot;&gt;a.out&lt;/code&gt; didn’t exist, that would be one way of getting this
error. But in my case what does not exist is the linker library that is
specified in the ELF file&lt;sup id=&quot;fnref:link-error&quot;&gt;&lt;a href=&quot;#fn:link-error&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;. That’s one of the joys of &lt;code class=&quot;highlighter-rouge&quot;&gt;errno&lt;/code&gt;:
for more complicated operations like this, it is unclear what file the &lt;code class=&quot;highlighter-rouge&quot;&gt;ENOENT&lt;/code&gt;
error refers to. Some of the socket errnos on the other hand are very specific.
Other syscalls just give you &lt;code class=&quot;highlighter-rouge&quot;&gt;EINVAL&lt;/code&gt;, and you need to figure out what exactly
is wrong. If all you get is a single integer, I don’t think there’s a way to
really strike that balance, as you have to encode both what you want humans to
see, but also what the calling code might deal with. For &lt;code class=&quot;highlighter-rouge&quot;&gt;EINVAL&lt;/code&gt;, a human
would probably want to know which of the arguments was wrong, while the
calling code can’t do anything with that information.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I could go on, but I think I’ll wrap it up here. People can only take so much.
&lt;sup id=&quot;fnref:followup&quot;&gt;&lt;a href=&quot;#fn:followup&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Systems programming is exciting, and if you’ve read this far you’d probably be
inclined to agree. I’ve shown some of the not-so-nice corners I’ve come across.
Some are inevitable in an operating system of this size and age. But they also
are a valuable lesson in system design. Generalising a bit&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Data should be machine-readable&lt;/em&gt;: otherwise, people will have to build ad-hoc
parsers. Those will contain bugs.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;APIs should allow to locally reason about code&lt;/em&gt;: it is impossible to reason
about all your dependencies in big software systems. Apart from that, it is
very hard to reason about large state spaces.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Errors matter:&lt;/em&gt; good error reporting gives a good developer experience.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Consistency matters:&lt;/em&gt; having too many knobs fragments your system.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Behaviour should be specified:&lt;/em&gt; This
creates a contract between application programmers and operating system
programmers. People will violate that contract, but no one knows what to
expect if there isn’t any.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But also, we have to work with what we’ve got. Even if we come up with robust
APIs for client applications, there we always be the long-tail of weird
legacy software that uses the old ones. &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; is here to stay, and so are
threads. What we can do is meticulously document both the caveats that come
with those, and the behaviour. For &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt; files, some EBNF definition can help
both formalize the format, and be used to auto-generate parsers. The less
we can base our engineering on guesswork, the better.&lt;/p&gt;

&lt;h1 id=&quot;quiz-results&quot;&gt;EBNF results&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Maybe.&lt;sup id=&quot;fnref:maybe&quot;&gt;&lt;a href=&quot;#fn:maybe&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Tabs.&lt;sup id=&quot;fnref:status-tabs&quot;&gt;&lt;a href=&quot;#fn:status-tabs&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Yes.&lt;/li&gt;
  &lt;li&gt;No.&lt;/li&gt;
  &lt;li&gt;Yes.&lt;/li&gt;
  &lt;li&gt;No.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, those were kind of trick questions. No one would ever have gotten
the first one right (what kind of answer is that even?). And the last two don’t
make any sense either, because they are both single values.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#quiz&quot;&gt;Go back up&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;endnotes&quot;&gt;Endnotes&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Or cheat, I’m a sign, not a cop. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/acg/psmisc/blob/master/src/killall.c&quot;&gt;GNU/Linux&lt;/a&gt;, &lt;a href=&quot;http://sources.freebsd.org/RELENG_7/src/usr.bin/killall/killall.c&quot;&gt;FreeBSD&lt;/a&gt;, or &lt;a href=&quot;https://github.com/apple-open-source/macos/blob/master/shell_cmds/killall/killall.c&quot;&gt;macOS&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:exhalation&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Spoilers for Ted Chiang’s story “Anxiety Is the Dizziness of
          Freedom”&lt;/strong&gt;. It’s like the premise of that story. 
          (Assuming single-threaded) fork brings forth a new
          process that is the same, except for one int, which is used to
          make a choice. All other differences derive from that. &lt;a href=&quot;#fnref:exhalation&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wrapper&quot;&gt;
      &lt;p&gt;I’m not a fan of syscalls without wrappers, as that encourages
        people to use raw syscalls, which then constrains libc
        implementors. clone is actually a good example: Bionic (Android’s
        libc) has a cache for the TID of a thread. It needs to invalidate
        that cache upon calls to fork / clone / etc. It can only do this
        when people use the syscall wrapper. People don’t always. &lt;a href=&quot;#fnref:wrapper&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:aspirational&quot;&gt;
      &lt;p&gt;Some of the more low-level details leave a lot to be desired.
             Many things are impossible in a standards compliant way, or
             are underspecified, so people end up doing what works in
             practice. &lt;a href=&quot;#fnref:aspirational&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:nobreak&quot;&gt;
      &lt;p&gt;This, of course, leads to the question of what constitutes a
        feature, and what constitutes a bug. And what level of quality you
        expect from user-space. For instance, adding a new line to a proc
        file would break applications that do not properly look at key,
        value pairs, but rather hard-code the line they expect the value
        to be at. It’s generally accepted that writing code like this is
        asking to be broken. &lt;a href=&quot;#fnref:nobreak&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:link-error&quot;&gt;
      &lt;p&gt;This has actually happened to me before. But if you know where
           to look (&lt;a href=&quot;http://man7.org/linux/man-pages/man2/execve.2.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man execve&lt;/code&gt;&lt;/a&gt;),
           it’s at least documented. &lt;a href=&quot;#fnref:link-error&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:followup&quot;&gt;
      &lt;p&gt;I do have opinions on more things, including but not limited to:
         &lt;code class=&quot;highlighter-rouge&quot;&gt;perf_event_open&lt;/code&gt;, signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;sendmsg&lt;/code&gt;, session leaders,
         controlling terminals, &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGPIPE&lt;/code&gt;, … &lt;a href=&quot;#fnref:followup&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:maybe&quot;&gt;
      &lt;p&gt;Depends on whether your kernel has &lt;a href=&quot;https://github.com/torvalds/linux/commit/f5b65348fd77839b50e79bc0a5e536832ea52d8d&quot;&gt;this commit&lt;/a&gt;. &lt;a href=&quot;#fnref:maybe&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:status-tabs&quot;&gt;
      &lt;p&gt;The &lt;a href=&quot;http://man7.org/linux/man-pages/man5/proc.5.html&quot;&gt;manpage&lt;/a&gt; uses spaces. &lt;a href=&quot;#fnref:status-tabs&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 19 Apr 2020 17:30:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/2020/04/19/linux-the-good-the-bad-and-the-ugly.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/2020/04/19/linux-the-good-the-bad-and-the-ugly.html</guid>
        
        
      </item>
    
      <item>
        <title>Automatic Org-Mode</title>
        <description>&lt;p&gt;With the unprecedented en vogue&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; right now, I have taken the unprecedented
step of trying out Emacs after having been a loyal Vim user for years. This is
not going to be another charge in the endless Editor War&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Rather more
uncontroversially, this is going to focus on note-taking and how technology can
(and cannot) help.&lt;/p&gt;

&lt;p&gt;If how this relates to Emacs is a mystery, just trust me that this will make
sense. But first to more elementary things.&lt;/p&gt;

&lt;h1 id=&quot;pen-and-paper&quot;&gt;Pen and Paper&lt;/h1&gt;

&lt;p&gt;On my desk at work&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; I have a notebook (of nice dotted paper&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;) and a fountain
pen&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. I use them to take notes in meetings, while working, draw diagrams,
write TODO lists. I clearly mark items that are tasks, and tick them off once
done. Once a notebook is full, I scan it for archival.&lt;/p&gt;

&lt;p&gt;It works fairly well, but there are some limitations. An obvious drawback is
the lack of searchability&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. This is not helped by that the way I keep the
notebook, it is sorted by time; this also makes it hard to amend or extend
previous entries. Legibility occasionally is an issue, especially when I take
notes in a hurry, for instance in a meeting.&lt;/p&gt;

&lt;p&gt;Paper and fountain pens are technologies &lt;em&gt;invented 2000 and 200 years ago&lt;/em&gt;.
With all our fancy tools of the supposed information age, can we do better?&lt;/p&gt;

&lt;h1 id=&quot;maybe&quot;&gt;Maybe?&lt;/h1&gt;
&lt;p&gt;This has been my main note-taking system for about three years now. Before that,
calling my note-taking at work a system would have been a euphemism&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;. How
come I, as a computer engineer with terrible handwriting, still use a physical
piece of paper?&lt;/p&gt;

&lt;p&gt;Paper, it turns out, is quite good at what it does. No one, to my knowledge,
has been able to reproduce the freedom and convenience of writing on paper. It
is trivial to interleave drawings and text, you can split the page into as many
sections or columns as you want. I regularly take some space I have free on the
right to designate to some related thought that does not really fit into the
main narrative.&lt;/p&gt;

&lt;p&gt;Does this mean digital notetaking is a lost cause?&lt;/p&gt;

&lt;h1 id=&quot;beating-at-its-own-game&quot;&gt;Beating at its own game&lt;/h1&gt;

&lt;p&gt;Some programs, like &lt;a href=&quot;https://onenote.com&quot;&gt;OneNote&lt;/a&gt;, have attempted to replicate the experience of
taking notes on paper. I have tried using OneNote for a bit, and would say
it has not succeeded. But that, I think, is also the wrong approach: you should
not try to beat paper at its own game. Rather, you should focus on what digital
technologies are good at.&lt;/p&gt;

&lt;p&gt;When you do that, paper’s strength also becomes a weakness. From an information
theory point of view, a hand-written piece of paper holds a lot more bits of
information than the same text as an ASCII text file. Sometimes this lets you
express more exactly what you want, but mostly it is unnecessary. When writing
a word, chances are the exact ways you write the letters is not relevant and
mostly determined by chance.&lt;/p&gt;

&lt;p&gt;Having less noise in the data, as you have in digital notes, makes it easier to
automatically process them. You can search within them, automatically find
relationships, easily replicate, among other things.&lt;/p&gt;

&lt;h1 id=&quot;relationships&quot;&gt;Relationships&lt;/h1&gt;

&lt;p&gt;At least for me, one of the most important part of notes is linking different
kinds of artifacts. As I work in software engineering, these artifacts might be
a bug, a pull request, some mathematical concept or algorithm, things like that.
A bug I am fixing might relate to an algorithm, and the fix is done as a pull
request. In addition to all of this, I might want to add my own comments.&lt;/p&gt;

&lt;p&gt;This is a use-case very poorly served by paper notes, as you’d have to
physically bring these things to the same place. This is why, so far, I
have mostly used notes as a &lt;em&gt;thinking aid&lt;/em&gt;, rather than a &lt;em&gt;memory aid&lt;/em&gt;. I would
take down notes more as a form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber ducking&lt;/a&gt; than anticipating I will
revisit them later – it was often prohibitively hard to find them again at the
right time.&lt;/p&gt;

&lt;p&gt;But if I could revisit those notes that were intended as &lt;em&gt;thinking aid&lt;/em&gt; later,
it would help me remember why certain decisions were taken. If this was
fairly close to when it was written, this has already proven useful.
I might not remember why I had dismissed an alternative approach, but sometimes
my notes do. They would say something like “&lt;del&gt;overload flux capacitor -&amp;gt; bad idea,
brings us back to dinosaur age.&lt;/del&gt;” Then I can immediately dismiss that approach
again, without wasting cognitive effort on it again.&lt;/p&gt;

&lt;h1 id=&quot;roam&quot;&gt;Roam&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://roamresearch.com/&quot;&gt;Roam&lt;/a&gt; note taking app has a simple but really cool way of dealing with
those relationships between concepts. Every time you refer to another concept
in a note, you get a back reference from the page about that concept. So, if
I write a note about, say, move semantics in C++, and mention C++ in that page,
the C++ page will show me a back reference to “move semantics”. It also lets
you see these relationships in a graph.&lt;/p&gt;

&lt;p&gt;That goes some way of making notes more discoverable later, as you automatically
get a sort of index built. But what I think is missing there is how this
interacts with artifacts that are not notes. Take for instance this blog post.
Say you have a great idea that is related to it, and you want to remember it.
You could write a note that has a link to it. Wouldn’t it then be nice to have
a backreference &lt;em&gt;from this post&lt;/em&gt;? Without that, how likely are you to remember
that you had even written that note in a year’s time?&lt;/p&gt;

&lt;h1 id=&quot;orgmode&quot;&gt;OrgMode&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://orgmode.org&quot;&gt;OrgMode&lt;/a&gt; is a package for Emacs that is designed for note-taking. It is
superficially similar to Markdown: you can have headings, lists, tables, etc.
It is somewhat more sophisticated than that, even as a text processor: you can
insert blocks of code that can be executed in line, and produce data to be used
by another block of code. But this is somewhat beside the point here.&lt;/p&gt;

&lt;p&gt;What’s more interesting are its cross-reference abilities. You can put TODO
items with deadlines in your notes, and then have OrgMode generate an agenda
(from all your files). You can tag your headings (and files) and then search
according to that.&lt;/p&gt;

&lt;h1 id=&quot;org-roam&quot;&gt;Org-Roam&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://org-roam.readthedocs.io/&quot;&gt;Org-Roam&lt;/a&gt; takes the ideas of Roam (mainly backreferences) and adapts them
to OrgMode. The main feature it allows is to display the back-references to
the current file. It also allows to to generate a graph of your references
using GraphViz, but that is much less pretty and useful than the interactive
graph Roam-proper offers.&lt;/p&gt;

&lt;p&gt;That’s nice, but it’s still a walled garden. Back-references can only be
created from other notes (specifically ones within your Org-Roam directory).
But this time, the walled-garden is within an open-source software, so maybe
we can do something to jump the wall.&lt;/p&gt;

&lt;h1 id=&quot;instant-org&quot;&gt;Instant-Org&lt;/h1&gt;
&lt;p&gt;These ideas have led me to write a &lt;a href=&quot;https://gist.github.com/segfaulthunter/f56ec6b8fd579b5bf1a0298a0f8cc175&quot;&gt;simple prototype&lt;/a&gt; of how a system that can
jump that wall might look. The idea is very simple: whenever we switch to a new
window&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;, we analyze whether the currently focused window relates to any
entity that we have a note about: for instance, if we switch to a browser
window, I parse the title to see whether we are currently looking at a bug,
a pull request, a GitHub repository (sadly, each of those is a hardcoded
regex). If it’s a terminal window, I look at the current working directory
to see if I have any notes about that.&lt;/p&gt;

&lt;p&gt;It then checks the Org-Roam database to see whether we have a note about that
entity, and if we do, automatically opens it in the background. 
This, being a prototype, is still an approximation on what I ultimately
envision: we can link notes to entities outside of the walled garden this way,
but we don’t collect back-references if other notes link to the entity, not
the associated note. I recorded a &lt;a href=&quot;https://drive.google.com/file/d/19v5u2AmO27IMI-H9mx-Q0TqKmzrgzVGT/view&quot;&gt;short demo&lt;/a&gt; on how that looks.&lt;/p&gt;

&lt;p&gt;Once I get more comfortable with elisp, I will attempt to teach Org-Roam to
handle more sorts of links. That would make the resulting graph much richer and
more useful: whenever you visit a website, you can see all the time you
referred to it in any note.&lt;/p&gt;

&lt;p&gt;Is this better than paper notes? Maybe. But only once the knowledge graph has
grown enough for the overhead in taking notes to pay dividends.&lt;/p&gt;

&lt;h1 id=&quot;endnotes&quot;&gt;Endnotes&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;If anyone happens to read this in the future: this was written at the
  time of the global COVID-19 lockdowns. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Vim keybindings are better. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;If you have never tried dotted paper, do it. It’s like squared paper with
  less visual clutter. I like the &lt;a href=&quot;https://www.amazon.co.uk/gp/product/B00BCH03Z2&quot;&gt;Rhodia A4 notebook&lt;/a&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Which I, inconveniently, have no access to right now. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;JinHao make &lt;a href=&quot;https://www.amazon.co.uk/dp/B07PQ2RXF7&quot;&gt;insanely affordable&lt;/a&gt;
  ones. I promise I do not get paid for these Amazon links. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;There will need to be some more breakthroughs in machine learning before
  I can subject my handwriting to OCR software, and until then I’ll have to
  continue to search manually. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;University is easier. Things can be neatly arranged by subjects. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;Actually, I just poll the active window every 100 ms to see if it changed. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 16 Apr 2020 00:40:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/2020/04/16/organizing-notetaking.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/2020/04/16/organizing-notetaking.html</guid>
        
        
      </item>
    
      <item>
        <title>Analysing regexp with Golang</title>
        <description>&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: Let me say this first. Google’s regular expression implementations are known for not implementing features that make them, well, not regular. Both &lt;code class=&quot;highlighter-rouge&quot;&gt;re2&lt;/code&gt; and Golang’s &lt;code class=&quot;highlighter-rouge&quot;&gt;regexp&lt;/code&gt; do not support backreferences. Otherwise, the things done here would be hard, or impossible.&lt;/p&gt;

&lt;p&gt;I may not be Golang’s biggest fan in general (lack of generics, verbose syntax, simplistic type system, etc), but I’ve written a bunch of it in the last couple of years and found an unexpectedly useful feature. Golang provides a package called &lt;code class=&quot;highlighter-rouge&quot;&gt;regexp/syntax&lt;/code&gt; that proves to be as useful as its documentation is sparse.&lt;/p&gt;

&lt;p&gt;In essence, this package exposes the user to the finite state machines built by the regexp compiler. This can be used to do analyses on regular expressions such as “does this regexp ever match a particular character after matching &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; characters?” or “does this regexp match any strings starting with a particular prefix?”. These might sound like constructed examples, but both of them actually popped up in my dayjob.&lt;/p&gt;

&lt;h1 id=&quot;toy-example-loop-detection&quot;&gt;Toy Example: Loop detection&lt;/h1&gt;

&lt;p&gt;For sake of simplicity, let’s explore a constructed example first in this post: does a regexp match strings of arbitrary length? Or, in more technical terms: is there a loop in the finite state machine? Let’s get right started with the boilerplate of compiling a regular expression into something called a &lt;code class=&quot;highlighter-rouge&quot;&gt;Prog&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`.*`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Perl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Parse: %v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Compile: %v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This actually produces a nice and readable representation of the generated finite state machine. Note the * next to 2 which tells us that this is the initial state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  0	fail
  1	anynotnl -&amp;gt; 2
  2*	alt -&amp;gt; 1, 3
  3	match&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we see here is the textual representation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Prog&lt;/code&gt; object. It’s a struct containing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Inst&lt;/code&gt;: list of instructions&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Start&lt;/code&gt;: initial instruction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Inst&lt;/code&gt; is the type used to represent an instruction. It’s a struct containing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Op&lt;/code&gt;: type of instruction&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Out&lt;/code&gt;: next instruction (except for InstMatch and InstFail, which are terminal instructions)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Arg&lt;/code&gt;: additional argument to some instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purposes of this toy example, all we care about is which instructions can follow from a given instruction. For most instructions, that is the instruction referred to in &lt;code class=&quot;highlighter-rouge&quot;&gt;Out&lt;/code&gt;. Let’s introduce the odd ones here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstMatch&lt;/code&gt;: successfully match input string. Does not have successor instruction.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstFail&lt;/code&gt;: reject input string. Does not have successor instruction.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstAlt&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAltMatch&lt;/code&gt;: either &lt;code class=&quot;highlighter-rouge&quot;&gt;Out&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Arg&lt;/code&gt; are the successor instruction. A string matches if either of the branches arrives at &lt;code class=&quot;highlighter-rouge&quot;&gt;InstMatch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are curious about the difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAlt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAltMatch&lt;/code&gt;: From all I could determine, &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAltMatch&lt;/code&gt; is an optimisation where it is known that one branch leads to a match while the other branch consumes characters. I do not see the compiler or any rewriting actually using this instruction, so it does not seem to be in use. Most of the implementation treats them interchangeably, while &lt;a href=&quot;https://golang.org/src/regexp/backtrack.go?h=InstAltMatch#L181&quot;&gt;backtrack.go&lt;/a&gt; in the regex evaluator appears to use it to determine which branch to take.&lt;/p&gt;

&lt;p&gt;This information allows us to implement a helper function to determining the successor instructions, given an instruction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSuccessors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstFail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstAlt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstAltMatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can implement loop-detection by a simple breadth-first search, keeping track of already visited nodes in a set (i.e. a &lt;code class=&quot;highlighter-rouge&quot;&gt;map[uint32]bool&lt;/code&gt;, because Golang does not have a set type).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HasLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tovisit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSuccessors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;a-regex-engine&quot;&gt;A regex engine&lt;/h1&gt;

&lt;p&gt;Now let’s try to build a very inefficient regex engine based on this. To do so, let us first introduce the various rune instructions (rune is Golang for Unicode codepoint). There is &lt;code class=&quot;highlighter-rouge&quot;&gt;InstRune&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;InstRune1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;InstRuneAny&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstRuneAnyNotNL&lt;/code&gt;. Most of them (except &lt;code class=&quot;highlighter-rouge&quot;&gt;InstRune&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstRune1&lt;/code&gt;) should be self-explanatory, but here’s the whole list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstRuneAny&lt;/code&gt; matches any rune.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstRuneAnyNotNL&lt;/code&gt; matches any rune except newlines.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstRune&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchRune&lt;/code&gt; method to determine whether it matches a rune.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstRune1&lt;/code&gt; matches the rune provided in &lt;code class=&quot;highlighter-rouge&quot;&gt;i.Rune[0]&lt;/code&gt; (obviously.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This leaves us with two remaining useful instructions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstCapture&lt;/code&gt;: capture a match into a capture group. We won’t bother with this here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstEmptyWidth&lt;/code&gt;: match constrains on the current position in the string. This has a &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchEmptyWidth&lt;/code&gt; to determine whether it matches.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s also &lt;code class=&quot;highlighter-rouge&quot;&gt;InstNop&lt;/code&gt; which, well, does nothing.&lt;/p&gt;

&lt;p&gt;Of course, the easiest way to do this is a recursive evaluator. We pass in a program, the current instruction, and input, and the current position in the input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;rune&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s first determine the previous and current rune at the current position, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; for the borders of the string (to be consistent with &lt;code class=&quot;highlighter-rouge&quot;&gt;MatchEmptyWidth&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;rune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;rune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now all that’s left is one fairly large switch (if you look at actual implementations of regex engines, there are also often giant switches, so it’s legit).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstAlt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAltMatch&lt;/code&gt; are the same, so let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fallthrough&lt;/code&gt; statement for go switch statements (this is much more sane than C-style fallthrough by default).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstAlt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstAltMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don’t care about &lt;code class=&quot;highlighter-rouge&quot;&gt;InstCapture&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;InstNop&lt;/code&gt; here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstNop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstCapture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;InstEmptyWidth&lt;/code&gt; we use the method that was given to us for this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstEmptyWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MatchEmptyWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(I could get used to this). &lt;code class=&quot;highlighter-rouge&quot;&gt;InstMatch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstFail&lt;/code&gt; are obvious.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstFail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then there come the various ways of matching runes. Note that this is the only time we have to increment the index into our input, as this is the only time we actually consume any runes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRune&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MatchRune&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRune1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rune&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRuneAny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRuneAnyNotNL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it. Now some due diligence against us being bad programmers, and we’re done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid instruction.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fell off the switch.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, that was fun. But not terribly exciting. But what this gives is as good mental model of what exactly the different instructions mean, which can be used to build more exciting things.&lt;/p&gt;

&lt;h1 id=&quot;do-we-only-match-even-length-strings&quot;&gt;Do we only match even-length strings?&lt;/h1&gt;

&lt;p&gt;Now that we can proudly proclaim we have written a regular expression engine (well, maybe we were &lt;em&gt;slightly&lt;/em&gt; cheating and someone else helped &lt;em&gt;a bit&lt;/em&gt;), let’s take up a bigger challenge. Given a regular expression that possibly matches arbitrarily length strings, determine whether all strings matched have an even size. Sounds like an interview question? A bit, but I also hope I’ll never get this as an actual interview question.&lt;/p&gt;

&lt;p&gt;Let’s start with a similar prototype as for our &lt;code class=&quot;highlighter-rouge&quot;&gt;Match&lt;/code&gt; function, but instead of our input let’s have something that flips around whether we are at an even or odd step. For reasons that will make sense later, let’s encode this as an integer that flips between &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; (so it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;idx % 2&lt;/code&gt;). We also need to keep track of which nodes we have seen before, or we will wait for a long time. But if you think about it a bit, we need to keep track of this for even and odd steps, an even visit and an odd visit are not the same. That results in the beautiful type of &lt;code class=&quot;highlighter-rouge&quot;&gt;map[int]map[uint32]bool&lt;/code&gt;, or a map from an integer to a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;uint32&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s start with the easy part. I literally copy &amp;amp; pasted the &lt;code class=&quot;highlighter-rouge&quot;&gt;Match&lt;/code&gt; code, removed all the stuff that actually does any … matching, plumbed through the visited map and made &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt; mod 2. That gives us all the rune instructions and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstCapture&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;InstNop&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InstEmptyWidth&lt;/code&gt; (which are all, for all intents and purposes, noop).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstNop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstCapture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstEmptyWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRune&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRune1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRuneAny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstRuneAnyNotNL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstMatch&lt;/code&gt; is straightforward, as we just have to check whether we are at an even step. &lt;code class=&quot;highlighter-rouge&quot;&gt;InstFail&lt;/code&gt; confusingly returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, as we do not care about branches that do not lead to matches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstFail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now to one of my least favourite parts of Golang, copying nested maps. But here we go. Let’s introduce a helper method, as when we branch for &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAlt&lt;/code&gt; we will need a separate ropy of the visited map for both branches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OK, with that out of the way, we can tackle the &lt;code class=&quot;highlighter-rouge&quot;&gt;InstAlt&lt;/code&gt; instructions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstAlt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstAltMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;branchvisited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branchvisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This one is different, as we want to make sure we can &lt;em&gt;only&lt;/em&gt; match even length strings, so we need to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; the conditions, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; them.&lt;/p&gt;

&lt;p&gt;Due diligence again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid instruction.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fell off the switch.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we stop for a second to see what we’ve built, it’s obvious we’ve built a potential infinite loop. Let’s rectify this. If we arrive back at an instruction that we’ve been before with the same &lt;code class=&quot;highlighter-rouge&quot;&gt;idx % 2&lt;/code&gt;, we can just prune this branch and return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; as it is exactly the same.&lt;/p&gt;

&lt;p&gt;So let’s prepend our switch statement with the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then, of course, we need to keep track of what we’ve seen before, which again involves one of my least favourite parts of Golang, nested maps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s done! To see the whole code used in this post head of to this &lt;a href=&quot;https://gist.github.com/segfaulthunter/25a8fb5502ebddd413c00eada4ff18bf&quot;&gt;Github Gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have made it this far, it is probably also worth noting that the Z3 SMT solver has a &lt;a href=&quot;https://rise4fun.com/z3/tutorialcontent/sequences#h23&quot;&gt;Regex Theory&lt;/a&gt;. The last time I’ve played with it it was giving obviously incorrect answers, but that seems to have been rectified since. The nice thing about &lt;code class=&quot;highlighter-rouge&quot;&gt;regexp/syntax&lt;/code&gt; is that it uses the same library your application uses if you write it in Golang, and can be used in programs with more predictable performance and fewer dependencies than Z3.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 01:00:00 +0100</pubDate>
        <link>https://bitsrc.org/blog/programming/2018/03/01/golang-regexp.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/programming/2018/03/01/golang-regexp.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>More Turing Completeness, or: Somebody is wrong on the Internet</title>
        <description>&lt;p&gt;Hello, I am Florian and you might remember me from posts such as &lt;a href=&quot;http://bitsrc.org/blog/theoretical-cs/2016/08/27/turing-complete.html&quot;&gt;Turing Completeness&lt;/a&gt;. Today I am going to return to the topic of Turing Completeness, in a post in similar vein. Today’s post explores the arguments Zed Shaw presents in &lt;a href=&quot;https://learnpythonthehardway.org&quot;&gt;Learn Python The Hard Way&lt;/a&gt; on why &lt;a href=&quot;https://learnpythonthehardway.org/book/nopython3.html&quot;&gt;Python 3 is the inferior version&lt;/a&gt; of the language; in particular, how the concept of Turing Completeness is abused to make a point that is completely unrelated to it. Note that I explicitly do not want to take any position in the Python 2 vs. Python 3 argument, I merely want to expose the flawed logic in this particular line of reasoning.&lt;/p&gt;

&lt;p&gt;Let’s go explore the argument presented and why it is flawed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python 3 Is Not Turing Complete&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the right definition of Python 3, this might actually be technically correct. Any computer language executed on a real physical computer can never be truly Turing complete. Because all resources in a computer are finite, you could theoretically enumerate all possible states. If you have studied a bit of computation theory, Turing Machines are more powerful than that (also, you will know that functions that you can enumerate are usually “boring” from a computation theory point of view).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer science a fundamental law is that if I have one Turing Machine I can build any other Turing Machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am not completely sure what that even means. If you have a Turing Machine that just does nothing, I can not use that to build any Turing Machine. There is a Turing Machine (also known as the Universal Turing Machine) that can simulate all other Turing machines. Note that this requires the Turing Machines it simulates to be &lt;em&gt;encoded&lt;/em&gt; in some suitable way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I have COBOL then I can bootstrap a compiler for FORTRAN (as disgusting as that might be). If I have FORTH, then I can build an interpreter for Ruby.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have Python 3, you can &lt;em&gt;definitely&lt;/em&gt; use that to write an interpreter of Python 2 in it, if you really really want to. But even that has no direct correspondence to the point of Turing Completeness. Note how this talks about specific encodings of a program (i.e. programming languages), while the concept of Turing Completeness concerns itself with mathematical (partial) functions.&lt;/p&gt;

&lt;p&gt;A mathematical function is just a mapping from input to output, while a program is a procedure to produce said output. It is completely possible that a Turing Complete system is unable to express a &lt;em&gt;program&lt;/em&gt; another one can. The Game of Life is Turing Complete, but it will definitely will never be able to parse your Python program from your hard-disk.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Currently you cannot run Python 2 inside the Python 3 virtual machine. Since I cannot, that means Python 3 is not Turing Complete and should not be used by anyone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, no. It really really does not mean either of these things.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;Yes, that is kind of funny way of saying that there’s no reason why Python 2 and Python 3 can’t coexist other than the Python project’s incompetence and arrogance. Obviously it’s theoretically possible to run Python 2 in Python 3, but until they do it then they have decided to say that Python 3 cannot run one other Turing complete language so logically Python 3 is not Turing complete. I should also mention that as stupid as that sounds, actual Python project developers have told me this, so it’s their position that their own language is not Turing complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would really like to see these conversations. Either these Python developers are misquoted here, or were wrong (or, as explored above: technically correct – but that has nothing to do with any of the arguments that were made).&lt;/p&gt;

&lt;p&gt;The rest of the argument goes on in similar fashion, incorrectly combining concepts of theoretical computer science with implementations, citing how other virtual machines manage to be more general purpose, and so on, and so forth; the latter of which, of course, is true – but invariantly true for CPython 2 and CPython 3.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Nov 2016 23:40:00 +0100</pubDate>
        <link>https://bitsrc.org/blog/computer-science/2016/11/23/someone-is-wrong-on-the-internet.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/computer-science/2016/11/23/someone-is-wrong-on-the-internet.html</guid>
        
        
        <category>computer-science</category>
        
      </item>
    
      <item>
        <title>Fun with Operator Overloading</title>
        <description>&lt;p&gt;The other day I was asked to take a look at code I had written years ago that basically
allowed the user to build up logical formulas while always keeping them in CNF (conjunctive
normal form – that is, a logical formula where the outermost connective is always a conjunction).&lt;/p&gt;

&lt;p&gt;This was done by building a class hierarchy with an abstract class &lt;code class=&quot;highlighter-rouge&quot;&gt;Expr&lt;/code&gt; on the top level,
two classes &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprOr&lt;/code&gt; that represent conjunction and disjunction respectively and
both contain lists of &lt;code class=&quot;highlighter-rouge&quot;&gt;Expr&lt;/code&gt;. Various other classes where used to represent various atoms of
the formulas, the particular code was about solar physics so the atoms happen to be things like
&lt;code class=&quot;highlighter-rouge&quot;&gt;Wavelength(x, y)&lt;/code&gt; for selecting observations of a particular wavelength.&lt;/p&gt;

&lt;p&gt;The base class &lt;code class=&quot;highlighter-rouge&quot;&gt;Expr&lt;/code&gt; defines &lt;code class=&quot;highlighter-rouge&quot;&gt;__and__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__or__&lt;/code&gt;, that is the methods that need to be
implemented to overload the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; operations that just return &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprOr&lt;/code&gt;
of the object and the left hand operand.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprOr&lt;/code&gt; also implement the operation corresponding to their node type
by just returning a new &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprOr&lt;/code&gt; with the left hand operand added to the
list, respectively. They also implement &lt;code class=&quot;highlighter-rouge&quot;&gt;__rand__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__ror__&lt;/code&gt;, so their special implementation
is also applied if they are used at the right hand side of the operation – or that was the plan.
&lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd&lt;/code&gt; commutes &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; operations into the conjuction to keep conjunction as the top level
connective.&lt;/p&gt;

&lt;p&gt;The problem that I asked to help with was that &lt;code class=&quot;highlighter-rouge&quot;&gt;foo &amp;amp; (bar &amp;amp; baz)&lt;/code&gt; did not seem to evaluate into
&lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd(foo, bar, baz)&lt;/code&gt;, but rather &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd(foo, ExprAnd(bar, baz))&lt;/code&gt;, that is, the automatic
transformation to CNF was not working.&lt;/p&gt;

&lt;p&gt;Python actually implements logic that when you have an operation &lt;code class=&quot;highlighter-rouge&quot;&gt;foo &amp;amp; bar&lt;/code&gt; where the type of
&lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; is a subclass of the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and implements its own version of &lt;code class=&quot;highlighter-rouge&quot;&gt;__rand__&lt;/code&gt;, the
expression will be evaluating using that. So when you read &lt;code class=&quot;highlighter-rouge&quot;&gt;__rand__&lt;/code&gt; (or any of the operators)
is used of the left hand side does not implement the operator, that is wrong. For instance,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__add__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Foo &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;         

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__radd__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Qux &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;         

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x112f9f750&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x112f7e510&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This behaviour was what I was aiming to exploit by making &lt;code class=&quot;highlighter-rouge&quot;&gt;ExprAnd&lt;/code&gt; (for instance) implement
both &lt;code class=&quot;highlighter-rouge&quot;&gt;__and__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__rand__&lt;/code&gt; and make Python use the most specific implementation. Sadly, it
does not work this way. If you now introduce a third class that inherits from Foo and does not
implement either of the methods itself, the base class’ will be used, for instance&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x112f80890&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x112f93a90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The semantics of Python operator overloading will &lt;em&gt;only&lt;/em&gt; prefer the &lt;code class=&quot;highlighter-rouge&quot;&gt;__rand__&lt;/code&gt; method of the
right hand side if it is an object of a subclass of the &lt;em&gt;type of the right hand side object&lt;/em&gt;.
Note that this does not take into account in which class the implementation of the left hand side
was actually done, which explains the behaviour above.&lt;/p&gt;

&lt;p&gt;If you look at the class layout described above, this was exactly the case that I was hitting.
Disclaimer: What follows below is not how it was actually fixed in the code.&lt;/p&gt;

&lt;h1 id=&quot;going-crazy&quot;&gt;Going Crazy&lt;/h1&gt;
&lt;p&gt;I realized that what I had intended to implement back then was something like commutative
&lt;a href=&quot;http://clojure.org/reference/multimethods&quot;&gt;multimethod&lt;/a&gt;. Python’s dynamicity, for better or
worse, gives you the tools to do most of such things, so I decided to give it a go.&lt;/p&gt;

&lt;p&gt;The gist of the idea is to try to find the most specific implementation of the operation,
considering both operands. The operation of the left hand side operand is more specific if it overrides the definition of the operation on the right hand side (and the other way
round).&lt;/p&gt;

&lt;p&gt;This can conveniently be expressed in terms of Python: The operation of the left hand side
operand is more specific if the operation defined by the right hand side is in the MRO (method
resolution order – the list of classes, in order, that get consulted when looking up a method
in an object).&lt;/p&gt;

&lt;p&gt;To implement this, first we define a functions to get all functions. It is important to know
that the function is different to the unbound and bound method object and does not contain
information about which class it is contained in; the function object can be obtained from
an unbound method object by using &lt;code class=&quot;highlighter-rouge&quot;&gt;im_func&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inspect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fn_mro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getmro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_func&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mro&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can then be used to implement the logic as described above as a decorator that wraps
a method. Note that we have to compare whether the left and right side operator is actually the
same to prevent an infinite loop.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;most_specific&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_func&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_func&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self_fn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_mro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# We did not inherit this from something in other's MRO.
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_mro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# They didn't either. PANIC!
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we use the decorator on a slightly modified version of the previous example
(we use &lt;code class=&quot;highlighter-rouge&quot;&gt;__add__&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;__radd__&lt;/code&gt; because the decorator assumes commutativity
and uses the same operations on both sides).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_specific&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__add__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Foo &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;         

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_specific&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__add__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Qux &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...:&lt;/span&gt;         

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x103103690&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x103103f50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;....:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;....:&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x103103e50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10310b050&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 14 Oct 2016 18:00:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/python/2016/10/14/operator-overloading.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/python/2016/10/14/operator-overloading.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Completeness and decidability</title>
        <description>&lt;p&gt;The subtle difference between incompleteness (of a theory), completeness (of a proof system) and indecidability (of a logical system) are a common source of confusion. How come Gödel proved both completeness and incompleteness? How can a proof system be complete (there exists a proof for every true sentence) when the underlying logical system is undecidable (it is impossible to find a proof for every true sentence)?&lt;/p&gt;

&lt;p&gt;The first question can be answered by something that should be familiar to everyone working in IT: bad naming. The “completeness” in the two theorems actually refers to two different things: completeness in the completeness theorem relates a formal proof system to model theory and says that a statement is true only if it can be proved (in a proof system for which completeness holds), that is \( \Pi \models X \Rightarrow \Pi \vdash X \) – read \( X \) follows from \( \Pi \) implies \( X \) is provable from \( \Pi \); the completeness in the incompleteness theorem refers to whether a theory \( \Pi \) contains every sentence or its negation, i.e. \( \forall X (\Pi \models X \lor \Pi \models \neg X) \) – read for each \( X \),  either \( X \) or \( \neg X \) follow from \( \Pi \). It is not hard to see that those two statements have no direct relationship to each other – one of them talks about a theory (the \( \Pi \)), the other one about a proof system.&lt;/p&gt;

&lt;p&gt;The second question is more subtle and can be explained by the slightly metaphysical definition of truth and existence in classical logic. We can rewrite the statement of the completeness theorem as “for each true statement, there exists a proof“. To do so, let’s define \( P(x, \Pi, \phi) \) to be the predicate that is true iff \( x \) is a valid proof for \( \Pi \vdash \phi \). Then a formalisation would be \(\Pi \models \phi \Rightarrow \exists p\;P(p, \Pi, \phi) \). Decidability, which could be expressed as “there exists a procedure with which, for every true statement, we can find a proof“, on the other hand, could be expressed as (for the reader following at home – this definition works because f can just return an invalid proof for \( \Pi \not\models \phi \)) \(\exists f, P\;( f \text{ computable} \land \Pi \models \phi \Leftrightarrow P(f(\Pi, X), \Pi, \phi)) \).&lt;/p&gt;

&lt;p&gt;For a sound proof system (one that only proves true sentences, i.e. \( \Pi \models X \Leftarrow \Pi \vdash X \)), completeness of a proof system would imply decidabilty if you left out the part about computabilty. The difference is that explicitly quantifying over the function and requiring it be computable means there has to be a procedure, while a simple exists quantifier introduces an implicit function. The notion of procedure is a lot stronger than function; a function as defined in mathematics is simply a mapping from one set to the other (whereof there are uncountably infinite for infinite sets), while procedure requires a formal (finite) representation that could be executed by a computer (whereof there are countably infinite).&lt;/p&gt;

&lt;p&gt;This mirrors the distinction between classical and intuitionistic logic. In classical logic, there is a platonic idea of truth (and thus existence): it is legitimate to refer to an object that one has no procedure on how to produce, if one can infer it has to exist (whatever it is). Intuitionistic logic, however, is a lot stricter and requires there to be a procedure on how to produce the objects.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Sep 2016 18:00:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/logic/2016/09/25/completeness.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/logic/2016/09/25/completeness.html</guid>
        
        
        <category>logic</category>
        
      </item>
    
      <item>
        <title>A Paper a Whatever #15: Keystroke Recognition Using WiFi Signals</title>
        <description>&lt;p&gt;This paper is about detecting a user’s keypresses using the interference the movements of the fingers cause in WiFi signals. This sounds scary and like something out of a cheesy spy movie; nevertheless it is not quite time to get out your tinfoil hat, as (at least as demonstrated) this is only accurate in controlled conditions where equipment is specifically set-up and the user is instructed not to move their head. It does not seem like there is anything that makes it inherently impossible to do in uncontrolled conditions.&lt;/p&gt;

&lt;p&gt;The introduction talks about various other interesting approaches other people have taken to recognize keystrokes, including matching on the distinctive sound different keypresses produce or their electromagnetic signature.  There is also prior work in using radio interference patterns, but the authors of this paper took the different approach of only using over-the-counter equipment for doing so. I was not aware at all that there was this much research going on on essentially remote key-logging.&lt;/p&gt;

&lt;p&gt;Their approach, however, exploits something known as CSI values – sadly, no, that does not stand for Crime Scene Investigation. CSI stands for Channel State Information and is a set of values that WiFi devices use to optimize their transmission among multiple channels.&lt;/p&gt;

&lt;p&gt;They observed that it is possible to find signatures for different movements of the fingers in those CSI values, but they faced the problem that they needed to determine when a key-press started and ended, and noise was also a problem. They would denoise the signal by first applying low-pass filtering and then then applying Principal Component Analysis on the data retrieved from the CSI of various channels – they noticed that while the changes were not the same in all of them, they were strongly correlated. So they applied PCA, discarding the highest variance component.&lt;/p&gt;

&lt;p&gt;Mean Absolute Deviations are then used to find parts of the timeseries that are high in variance and correspond to keypresses by comparing them to empirically obtained thresholds. The thus found timeseries are then used to train a k Nearest Neighbour model, which would classify each unknown sample with the class that the majority of its k nearest neighbours from the training data-set correspond to. They use Dynamic Time Warping as a distance metric, which tries to align two data-sets by non-linearly warping the time axis until they match. This allows them to compare the signatures of keypresses, even if they are pressed longer or shorter than in the training data.&lt;/p&gt;

&lt;p&gt;This model is then trained with 30 data-samples per user per key, and numbers for accuracy are given. This is with the caveat that the experiment was done under controlled conditions, in particular the users were asked to type one key at a time and not to move their heads or other body parts. Training the model independently for each user, they managed to achieve 93.5 % keypress recognition accuracy in continuously typed sentences.&lt;/p&gt;

&lt;p&gt;Find the paper &lt;a href=&quot;https://www.sigmobile.org/mobicom/2015/papers/p90-aliA.pdf&quot; title=&quot;Paper as PDF&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 03 Sep 2016 17:15:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/apaw/2016/09/03/a-paper-a-week-keystroke-recognition-wifi.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/apaw/2016/09/03/a-paper-a-week-keystroke-recognition-wifi.html</guid>
        
        
        <category>apaw</category>
        
      </item>
    
      <item>
        <title>Turing Completeness</title>
        <description>&lt;p&gt;This is one of my pet peeves: I have heard many people describe Turing-complete as “a language you can do everything with”. That is untrue and this is a very short post to set this right.&lt;/p&gt;

&lt;p&gt;Turing-complete means a language can be used to express a (probably non-proper – if you manage to find a system that is more expressible than the Turing machine, I am sure there is a Turing award or two waiting for you) superset of the pure mathematical functions that a Turing machine can compute. This does not talk about I/O (which is an important part of an actual computer) or the complexity these functions are executed in. So, I am afraid we will not see an operating system written in the Game of Life.&lt;/p&gt;

&lt;p&gt;This definition also means an actual computer is technically not Turing complete, given it cannot simulate a Turing machine’s infinite tape.&lt;/p&gt;

&lt;p&gt;So, concluding: Turing-complete does not mean a language is useful to do something on an actual computer, while an actual computer is not actually Turing-complete. The two concepts are quite orthogonal.&lt;/p&gt;

&lt;p&gt;Elaborating more (it was late yesterday): I/O can be “simulated” with appropriate encoding in the output, but that is one of the points: arithmetic is Turing-complete, so I can, for all Turing-computable functions, produce an integer that &lt;em&gt;somehow encodes&lt;/em&gt; its result. This is an extremely important theoretical construct in computation theory, but also useless in a practical context, because I want to write actual data into actual memory of an actual machine.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 00:46:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/theoretical-cs/2016/08/28/turing-complete.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/theoretical-cs/2016/08/28/turing-complete.html</guid>
        
        
        <category>theoretical-cs</category>
        
      </item>
    
      <item>
        <title>A Paper a Week-ish #14: GraphLab: A New Framework for Parallel Machine Learning</title>
        <description>&lt;p&gt;It has been a  long time since I last posted one of those, apologies! I have been fairly busy with various things and the time I had for this blog I spent on non paper-related posts to mix things up a bit.&lt;/p&gt;

&lt;p&gt;The paper I read for this post is about GraphLab which is a framework for expressing parallel computations based on a graph model that allows to exploit the sparse structure of machine learning algorithms, that is to say that steps of the computation only operate on a subset of the state. In this graph data is associated with each vertex and edge, and a user-supplied update function is used to compute new values. This update function can only access and modify data in the neighbourhood of the node, that is the data of the node, its adjacent edges and vertices.&lt;/p&gt;

&lt;p&gt;In addition to the data stored in the graph, there is a shared data table, which contains data which, as the name suggests, can be accessed by all applications of the update function – it can not be modified by them though. To modify data in the shared data table, a fold function that iteratively calculates a value from the data in the vertices and the previous value is specified by the user. Optionally, the user can scale the result of the fold or supply functions to merge results of different fold operations.&lt;/p&gt;

&lt;p&gt;By imposing the restriction that the update function only operate on the neighbourhood of a node, the graph encodes the data dependencies between different parts of the computation and allows to determine which updates can be applied concurrently. GraphLab offers different consistency models: &lt;em&gt;full consistency&lt;/em&gt; makes sure no data can be accessed concurrently, &lt;em&gt;edge consistency&lt;/em&gt; ensures no two updates that access shared edges are executed at the same time, and &lt;em&gt;vertex consistency&lt;/em&gt; only ensures only one update is applied to a particular node at a given time. From all I can see, vertex consistency only works correctly for trivially parallelizable problems, that is problems consisting of independent threads of computation that do not interact.&lt;/p&gt;

&lt;p&gt;A scheduler determines the sequence of sets of updates that should appear to be applied to the graph at the same time. So, for example, if the sequence is [\( A \), \( B \)] where \( A \) and \( B \) are sets of functions applied to vertices, it is ensured that (modulo the consistency model) it appears that all the operations in \( A \) were applied to the graph at the same time, then all operations in \( B \). Different machine learning algorithms require different schedulers.&lt;/p&gt;

&lt;p&gt;Note how I said “appear to be applied”, which means that this is not necessarily how they are actually applied. As an example, if vertex consistency is used, and \( A = \{v_1, v_2\} \) and \( B = \{v_3, v_4\} \), then \( f(v_1) \), \( f(v_2) \), \( f(v_3) \), \( f(v_4) \) can be evaluated at the same time, while it still appears that \( B \) was applied after \( A \). There is a very strong connection to how databases handle transactions – if the update function does not modify values that are not exclusive to it by the consistency model, we get serializability – that is, the parallel execution produces the same result as some sequential one. Database transactions are also designed to be serializable, and two of them can commit concurrently if they involve disjuct sets of rows.&lt;/p&gt;

&lt;p&gt;The paper concludes with case studies of machine learning tasks implemented in GraphLab, which I will skip in this post.&lt;/p&gt;

&lt;p&gt;Find the paper here: &lt;a href=&quot;http://arxiv.org/pdf/1006.4990v1.pdf&quot; title=&quot;GraphLab: A New Framework For Parallel Machine Learning&quot;&gt;GraphLab: A New Framework For Parallel Machine Learning&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Apr 2016 01:10:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/apaw/2016/04/17/a-paper-a-week-graphlab-framework-parallel-machine-learning.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/apaw/2016/04/17/a-paper-a-week-graphlab-framework-parallel-machine-learning.html</guid>
        
        
        <category>apaw</category>
        
      </item>
    
      <item>
        <title>Using theorem proving to cheat in logic puzzles</title>
        <description>&lt;p&gt;I recently got the book &lt;a href=&quot;http://www.amazon.co.uk/What-Name-This-Book-Recreational/dp/0486481980&quot; title=&quot;What is the name of this book?&quot;&gt;What is the Name of this Book?&lt;/a&gt; by the excellent Raymon Smullyan, who is also the author of a book about &lt;a href=&quot;http://www.amazon.co.uk/Godels-Incompleteness-Theorems-Oxford-Guides/dp/0195046722&quot; title=&quot;Gödels Incompleteness Theorems&quot;&gt;Gödel’s Incompleteness Theorems&lt;/a&gt; I could not praise highly enough. The book I purchased is a collection of logical riddles. While recreationally solving logical puzzles oneself can be very rewarding, when I got the book I considered that it would be interesting to try and solve these using formalized logic. Letting a computer find the solution given the formal specification is the obvious next step, which is what I will attempt in this blogpost. To do so, I will first formalize the specification in first-order logic, and then use the &lt;a href=&quot;https://z3.codeplex.com&quot; title=&quot;Z3 SMT Solver&quot;&gt;Z3 SMT solver&lt;/a&gt; to find satisfying models.&lt;/p&gt;

&lt;p&gt;A lot of the book is about a world in which there are two types of people, knights and knaves. Knights always speak the truth, and knaves always lie. This particular puzzle is about finding out information about the one werewolf among people A, B and C that make the following statements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A: C is a werewolf.&lt;/li&gt;
  &lt;li&gt;B: I am not a werewolf.&lt;/li&gt;
  &lt;li&gt;C: At least two of us are knaves.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are trying to find answers to the following two questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the werewolf a knight or a knave?&lt;/li&gt;
  &lt;li&gt;If you have to take one of them as a travelling companion, and it is more important that he be not a werewolf than that he not be a knave, which one would you pick?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we will formalize the fact that there is exactly one werewolf as the two statements “there exists at least one werewolf” and “the werewolf is unique” (we assume that the universe contains only persons, because they are the only objects in this riddle, so we do not need a predicate for “is person”):&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{firsteqn}
\exists x\, Werewolf(x)
\end{equation}&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{onewerewolf}
\forall x\, (Werewolf(x) \implies (\forall y\, (x \ne y \implies \neg Werewolf(y))))
\end{equation}&lt;/p&gt;

&lt;p&gt;Then, we introduce the Knight predicate (and an equivalence of negative Knight to Knave for convenience)&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{knave}
\forall x\, (Knight(x) \equiv \neg Knave(x)) 
\end{equation}&lt;/p&gt;

&lt;p&gt;Next we can formalize the three statements, which are true if and only if the person that says them is a Knight.&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{astate}
Knight(A) \equiv Werewolf(C) 
\end{equation}&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{bstate}
Knight(B) \equiv \neg Werewolf(B) 
\end{equation}&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{lasteqn}
Knight(C) \equiv \exists x\, \exists y\, (x \ne y \land Knave(x) \land Knave(y)) 
\end{equation}&lt;/p&gt;

&lt;p&gt;If we call the set of equations (\ref{firsteqn}) to (\ref{lasteqn}) \( \Pi \), then we want to find out whether&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{sol1}
\Pi \models \exists x\, (Knight(x) \land Werewolf(x))
\end{equation}&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{sol2}
\Pi \models \exists x\, (Knave(x) \land Werewolf(x))
\end{equation}&lt;/p&gt;

&lt;p&gt;Then, to answer the second question, we want to check&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{sol3}
\Pi \models \neg Werewolf(A)
\end{equation}&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{sol4}
\Pi \models \neg Werewolf(B)
\end{equation}&lt;/p&gt;

&lt;p&gt;\begin{equation}\label{sol5}
\Pi \models \neg Werewolf(C)
\end{equation}&lt;/p&gt;

&lt;p&gt;So, with that out of the way, let us introduce the tool that will make sure we do not need to do any thinking: the Z3 SMT solver. SMT stands for satisfyability modulo theory and means that you can give it first-order formulas of some theories (like equality, integers, computer arithmetic, …) and it will try to find a satisfying model. Given infinite domains there is no guarantee that will be found (especially the negative answer is particularly challenging – if there is a positive one it will be found by enumeration eventually). If you want to prove \( \Pi \models A \) using an SMT solver, in general what you do is apply the deduction theorem to obtain \( \models \pi \implies A \) (where \( \pi \) is the conjunction of the elements of \( \Pi \)). All possible models satisfy this if and only if there is no model satisfying the negation, i.e. \( \neg ( \pi \implies A) \), which can be rewritten as \(\pi \land \neg A \). In other words, we ask the SMT solver if  \(\pi \land \neg A \) is satisfyable, and if the answer is no, \( \Pi \models A \) holds.&lt;/p&gt;

&lt;p&gt;Now all that’s left is translating this specification to Z3’s language. First thing we need to do is define a datatype for our objects, that are Persons. By using &lt;code class=&quot;highlighter-rouge&quot;&gt;declare-datatype&lt;/code&gt; we get objects that are only equal to themselves, so we can use the equality predicate as above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(set-option :timeout 600)
(declare-datatypes () ((Person A B C)))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we need to define our three predicates Knight, Knave and Werewolf.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(declare-fun Knight (Person) Bool)
(declare-fun Knave (Person) Bool)
(declare-fun Werewolf (Person) Bool)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we can formalize the formulas of \( \Pi \) into Z3 syntax pretty much verbatim. The statement that there is exactly one werewolf can be expressed with the two assertions that a model has to satisfy&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(assert (exists ((x Person)) (Werewolf x)))
(assert (forall ((x Person)) (implies (Werewolf x) (forall ((y Person)) (implies (not (= x y)) (not (Werewolf y)))))))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The three statements by A, B and C become the following. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; is used for both logical equivalence and equality between objects of the universe in Z3.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(assert (forall ((x Person)) (= (Knight x) (not (Knave x)))))
(assert (= (Knight A) (Werewolf C)))
(assert (= (Knight B) (not (Werewolf B))))
(assert (= (Knight C) (exists ((x Person) (y Person)) (and (not (= x y)) (and (Knave x) (Knave y))))))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have asserted all we know about the problem, we can begin trying to prove (\ref{sol1}) – (\ref{sol5}) to see which one the solutions is correct. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; operations of Z3 to temporarily add add assertions between the two operations. I simplified \( \neg \neg Werewolf(…) \) to \( Werewolf(…) \)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(push)
(assert (not (exists ((x Person)) (and (Werewolf x) (Knave x)))))
(check-sat)
(pop)

(push)
(assert (not (exists ((x Person)) (and (Werewolf x) (Knight x)))))
(check-sat)
(pop)

(push)
(assert (Werewolf A))
(check-sat)
(pop)

(push)
(assert (Werewolf B))
(check-sat)
(pop)

(push)
(assert (Werewolf C))
(check-sat)
(pop)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Z3’s answer to the input we gave it is&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;unsat
sat
unsat
sat
sat&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that (\ref{sol1}) and (\ref{sol3}) hold in all models, and the others do not. This means that the werewolf is a Knave, and we should take person A as our travelling companion.&lt;/p&gt;

&lt;p&gt;While a rather simple example, I think this is a nice demonstration of what one can do with an SMT solver.&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Apr 2016 23:40:00 +0200</pubDate>
        <link>https://bitsrc.org/blog/logic/2016/04/03/theorem-proving-logic-puzzles.html</link>
        <guid isPermaLink="true">https://bitsrc.org/blog/logic/2016/04/03/theorem-proving-logic-puzzles.html</guid>
        
        
        <category>logic</category>
        
      </item>
    
  </channel>
</rss>
